<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RestSharp.Silverlight</name>
    </assembly>
    <members>
        <member name="T:RestSharp.Authenticators.OAuth1Authenticator">
            <seealso href="http://tools.ietf.org/html/rfc5849"/>
        </member>
        <member name="T:RestSharp.OAuth2Authenticator">
            <summary>
            Base class for OAuth 2 Authenticators.
            </summary>
            <remarks>
            Since there are many ways to authenticate in OAuth2,
            this is used as a base class to differentiate between 
            other authenticators.
            
            Any other OAuth2 authenticators must derive from this
            abstract class.
            </remarks>
        </member>
        <member name="F:RestSharp.OAuth2Authenticator._accessToken">
            <summary>
            Access token to be used when authenticating.
            </summary>
        </member>
        <member name="M:RestSharp.OAuth2Authenticator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.OAuth2Authenticator"/> class.
            </summary>
            <param name="accessToken">
            The access token.
            </param>
        </member>
        <member name="P:RestSharp.OAuth2Authenticator.AccessToken">
            <summary>
            Gets the access token.
            </summary>
        </member>
        <member name="T:RestSharp.OAuth2UriQueryParameterAuthenticator">
            <summary>
            The OAuth 2 authenticator using URI query parameter.
            </summary>
            <remarks>
            Based on http://tools.ietf.org/html/draft-ietf-oauth-v2-10#section-5.1.2
            </remarks>
        </member>
        <member name="M:RestSharp.OAuth2UriQueryParameterAuthenticator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.OAuth2UriQueryParameterAuthenticator"/> class.
            </summary>
            <param name="accessToken">
            The access token.
            </param>
        </member>
        <member name="T:RestSharp.OAuth2AuthorizationRequestHeaderAuthenticator">
            <summary>
            The OAuth 2 authenticator using the authorization request header field.
            </summary>
            <remarks>
            Based on http://tools.ietf.org/html/draft-ietf-oauth-v2-10#section-5.1.1
            </remarks>
        </member>
        <member name="F:RestSharp.OAuth2AuthorizationRequestHeaderAuthenticator._authorizationValue">
            <summary>
            Stores the Authorization header value as "[tokenType] accessToken". used for performance.
            </summary>
        </member>
        <member name="M:RestSharp.OAuth2AuthorizationRequestHeaderAuthenticator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.OAuth2AuthorizationRequestHeaderAuthenticator"/> class.
            </summary>
            <param name="accessToken">
            The access token.
            </param>
        </member>
        <member name="M:RestSharp.OAuth2AuthorizationRequestHeaderAuthenticator.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.OAuth2AuthorizationRequestHeaderAuthenticator"/> class.
            </summary>
            <param name="accessToken">
            The access token.
            </param>
            <param name="tokenType">
            The token type.
            </param>
        </member>
        <member name="F:RestSharp.Authenticators.OAuth.OAuthTools._encoding">
            <summary>
            All text parameters are UTF-8 encoded (per section 5.1).
            </summary>
            <seealso cref="!:http://www.hueniverse.com/hueniverse/2008/10/beginners-gui-1.html"/> 
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.GetNonce">
            <summary>
            Generates a random 16-byte lowercase alphanumeric string. 
            </summary>
            <seealso cref="!:http://oauth.net/core/1.0#nonce"/>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.GetTimestamp">
            <summary>
            Generates a timestamp based on the current elapsed seconds since '01/01/1970 0000 GMT"
            </summary>
            <seealso cref="!:http://oauth.net/core/1.0#nonce"/>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.GetTimestamp(System.DateTime)">
            <summary>
            Generates a timestamp based on the elapsed seconds of a given time since '01/01/1970 0000 GMT"
            </summary>
            <seealso cref="!:http://oauth.net/core/1.0#nonce"/>
            <param name="dateTime">A specified point in time.</param>
            <returns></returns>
        </member>
        <member name="F:RestSharp.Authenticators.OAuth.OAuthTools.UriRfc3986CharsToEscape">
            <summary>
            The set of characters that are unreserved in RFC 2396 but are NOT unreserved in RFC 3986.
            </summary>
            <seealso cref="!:http://stackoverflow.com/questions/846487/how-to-get-uri-escapedatastring-to-comply-with-rfc-3986"/>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.UrlEncodeRelaxed(System.String)">
            <summary>
            URL encodes a string based on section 5.1 of the OAuth spec.
            Namely, percent encoding with [RFC3986], avoiding unreserved characters,
            upper-casing hexadecimal characters, and UTF-8 encoding for text value pairs.
            </summary>
            <param name="value">The value to escape.</param>
            <returns>The escaped value.</returns>
            <remarks>
            The <see cref="M:System.Uri.EscapeDataString(System.String)"/> method is <i>supposed</i> to take on
            RFC 3986 behavior if certain elements are present in a .config file.  Even if this
            actually worked (which in my experiments it <i>doesn't</i>), we can't rely on every
            host actually having this configuration element present.
            </remarks>
            <seealso cref="!:http://oauth.net/core/1.0#encoding_parameters"/>
            <seealso cref="!:http://stackoverflow.com/questions/846487/how-to-get-uri-escapedatastring-to-comply-with-rfc-3986"/>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.UrlEncodeStrict(System.String)">
            <summary>
            URL encodes a string based on section 5.1 of the OAuth spec.
            Namely, percent encoding with [RFC3986], avoiding unreserved characters,
            upper-casing hexadecimal characters, and UTF-8 encoding for text value pairs.
            </summary>
            <param name="value"></param>
            <seealso cref="!:http://oauth.net/core/1.0#encoding_parameters"/>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.NormalizeRequestParameters(RestSharp.Authenticators.OAuth.WebParameterCollection)">
            <summary>
            Sorts a collection of key-value pairs by name, and then value if equal,
            concatenating them into a single string. This string should be encoded
            prior to, or after normalization is run.
            </summary>
            <seealso cref="!:http://oauth.net/core/1.0#rfc.section.9.1.1"/>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.SortParametersExcludingSignature(RestSharp.Authenticators.OAuth.WebParameterCollection)">
            <summary>
            Sorts a <see cref="T:RestSharp.Authenticators.OAuth.WebParameterCollection"/> by name, and then value if equal.
            </summary>
            <param name="parameters">A collection of parameters to sort</param>
            <returns>A sorted parameter collection</returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.ConstructRequestUrl(System.Uri)">
            <summary>
            Creates a request URL suitable for making OAuth requests.
            Resulting URLs must exclude port 80 or port 443 when accompanied by HTTP and HTTPS, respectively.
            Resulting URLs must be lower case.
            </summary>
            <seealso cref="!:http://oauth.net/core/1.0#rfc.section.9.1.2"/>
            <param name="url">The original request URL</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.ConcatenateRequestElements(System.String,System.String,RestSharp.Authenticators.OAuth.WebParameterCollection)">
            <summary>
            Creates a request elements concatentation value to send with a request. 
            This is also known as the signature base.
            </summary>
            <seealso cref="!:http://oauth.net/core/1.0#rfc.section.9.1.3"/>
            <seealso cref="!:http://oauth.net/core/1.0#sig_base_example"/>
            <param name="method">The request's HTTP method type</param>
            <param name="url">The request URL</param>
            <param name="parameters">The request's parameters</param>
            <returns>A signature base string</returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.GetSignature(RestSharp.Authenticators.OAuth.OAuthSignatureMethod,System.String,System.String)">
            <summary>
            Creates a signature value given a signature base and the consumer secret.
            This method is used when the token secret is currently unknown.
            </summary>
            <seealso cref="!:http://oauth.net/core/1.0#rfc.section.9.2"/>
            <param name="signatureMethod">The hashing method</param>
            <param name="signatureBase">The signature base</param>
            <param name="consumerSecret">The consumer key</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.GetSignature(RestSharp.Authenticators.OAuth.OAuthSignatureMethod,RestSharp.Authenticators.OAuth.OAuthSignatureTreatment,System.String,System.String)">
            <summary>
            Creates a signature value given a signature base and the consumer secret.
            This method is used when the token secret is currently unknown.
            </summary>
            <seealso cref="!:http://oauth.net/core/1.0#rfc.section.9.2"/>
            <param name="signatureMethod">The hashing method</param>
            <param name="signatureTreatment">The treatment to use on a signature value</param>
            <param name="signatureBase">The signature base</param>
            <param name="consumerSecret">The consumer key</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.GetSignature(RestSharp.Authenticators.OAuth.OAuthSignatureMethod,System.String,System.String,System.String)">
            <summary>
            Creates a signature value given a signature base and the consumer secret and a known token secret.
            </summary>
            <seealso cref="!:http://oauth.net/core/1.0#rfc.section.9.2"/>
            <param name="signatureMethod">The hashing method</param>
            <param name="signatureBase">The signature base</param>
            <param name="consumerSecret">The consumer secret</param>
            <param name="tokenSecret">The token secret</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.GetSignature(RestSharp.Authenticators.OAuth.OAuthSignatureMethod,RestSharp.Authenticators.OAuth.OAuthSignatureTreatment,System.String,System.String,System.String)">
            <summary>
            Creates a signature value given a signature base and the consumer secret and a known token secret.
            </summary>
            <seealso cref="!:http://oauth.net/core/1.0#rfc.section.9.2"/>
            <param name="signatureMethod">The hashing method</param>
            <param name="signatureTreatment">The treatment to use on a signature value</param>
            <param name="signatureBase">The signature base</param>
            <param name="consumerSecret">The consumer secret</param>
            <param name="tokenSecret">The token secret</param>
            <returns></returns>
        </member>
        <member name="T:RestSharp.Authenticators.OAuth.OAuthWorkflow">
            <summary>
            A class to encapsulate OAuth authentication flow.
            <seealso cref="!:http://oauth.net/core/1.0#anchor9"/>
            </summary>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthWorkflow.BuildRequestTokenInfo(System.String)">
            <summary>
            Generates a <see cref="T:RestSharp.Authenticators.OAuth.OAuthWebQueryInfo"/> instance to pass to an
            <see cref="T:RestSharp.IAuthenticator"/> for the purpose of requesting an
            unauthorized request token.
            </summary>
            <param name="method">The HTTP method for the intended request</param>
            <seealso cref="!:http://oauth.net/core/1.0#anchor9"/>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthWorkflow.BuildRequestTokenInfo(System.String,RestSharp.Authenticators.OAuth.WebParameterCollection)">
            <summary>
            Generates a <see cref="T:RestSharp.Authenticators.OAuth.OAuthWebQueryInfo"/> instance to pass to an
            <see cref="T:RestSharp.IAuthenticator"/> for the purpose of requesting an
            unauthorized request token.
            </summary>
            <param name="method">The HTTP method for the intended request</param>
            <param name="parameters">Any existing, non-OAuth query parameters desired in the request</param>
            <seealso cref="!:http://oauth.net/core/1.0#anchor9"/>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthWorkflow.BuildAccessTokenInfo(System.String)">
            <summary>
            Generates a <see cref="T:RestSharp.Authenticators.OAuth.OAuthWebQueryInfo"/> instance to pass to an
            <see cref="T:RestSharp.IAuthenticator"/> for the purpose of exchanging a request token
            for an access token authorized by the user at the Service Provider site.
            </summary>
            <param name="method">The HTTP method for the intended request</param>
            <seealso cref="!:http://oauth.net/core/1.0#anchor9"/>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthWorkflow.BuildAccessTokenInfo(System.String,RestSharp.Authenticators.OAuth.WebParameterCollection)">
            <summary>
            Generates a <see cref="T:RestSharp.Authenticators.OAuth.OAuthWebQueryInfo"/> instance to pass to an
            <see cref="T:RestSharp.IAuthenticator"/> for the purpose of exchanging a request token
            for an access token authorized by the user at the Service Provider site.
            </summary>
            <param name="method">The HTTP method for the intended request</param>
            <seealso cref="!:http://oauth.net/core/1.0#anchor9"/>
            <param name="parameters">Any existing, non-OAuth query parameters desired in the request</param>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthWorkflow.BuildClientAuthAccessTokenInfo(System.String,RestSharp.Authenticators.OAuth.WebParameterCollection)">
            <summary>
            Generates a <see cref="T:RestSharp.Authenticators.OAuth.OAuthWebQueryInfo"/> instance to pass to an
            <see cref="T:RestSharp.IAuthenticator"/> for the purpose of exchanging user credentials
            for an access token authorized by the user at the Service Provider site.
            </summary>
            <param name="method">The HTTP method for the intended request</param>
            <seealso cref="!:http://tools.ietf.org/html/draft-dehora-farrell-oauth-accesstoken-creds-00#section-4"/>
            <param name="parameters">Any existing, non-OAuth query parameters desired in the request</param>
        </member>
        <member name="P:RestSharp.Authenticators.OAuth.OAuthWorkflow.RequestTokenUrl">
            <seealso cref="!:http://oauth.net/core/1.0#request_urls"/>
        </member>
        <member name="P:RestSharp.Authenticators.OAuth.OAuthWorkflow.AccessTokenUrl">
            <seealso cref="!:http://oauth.net/core/1.0#request_urls"/>
        </member>
        <member name="P:RestSharp.Authenticators.OAuth.OAuthWorkflow.AuthorizationUrl">
            <seealso cref="!:http://oauth.net/core/1.0#request_urls"/>
        </member>
        <member name="T:RestSharp.Deserializers.DeserializeAsAttribute">
            <summary>
            Allows control how class and property names and values are deserialized by XmlAttributeDeserializer
            </summary>
        </member>
        <member name="P:RestSharp.Deserializers.DeserializeAsAttribute.Name">
            <summary>
            The name to use for the serialized element
            </summary>
        </member>
        <member name="P:RestSharp.Deserializers.DeserializeAsAttribute.Attribute">
            <summary>
            Sets if the property to Deserialize is an Attribute or Element (Default: false)
            </summary>
        </member>
        <member name="T:RestSharp.Deserializers.DotNetXmlDeserializer">
            <summary>
            Wrapper for System.Xml.Serialization.XmlSerializer.
            </summary>
        </member>
        <member name="T:RestSharp.ParameterType">
            <summary>
             Types of parameters that can be added to requests
            </summary>
        </member>
        <member name="T:RestSharp.DataFormat">
            <summary>
            Data formats
            </summary>
        </member>
        <member name="T:RestSharp.Method">
            <summary>
            HTTP method to use when making requests
            </summary>
        </member>
        <member name="T:RestSharp.DateFormat">
            <summary>
            Format strings for commonly-used date formats
            </summary>
        </member>
        <member name="F:RestSharp.DateFormat.Iso8601">
            <summary>
            .NET format string for ISO 8601 date format
            </summary>
        </member>
        <member name="F:RestSharp.DateFormat.RoundTrip">
            <summary>
            .NET format string for roundtrip date format
            </summary>
        </member>
        <member name="T:RestSharp.ResponseStatus">
            <summary>
            Status for responses (surprised?)
            </summary>
        </member>
        <member name="T:RestSharp.Extensions.MiscExtensions">
            <summary>
            Extension method overload!
            </summary>
        </member>
        <member name="M:RestSharp.Extensions.MiscExtensions.SaveAs(System.Byte[],System.String)">
            <summary>
            Save a byte array to a file
            </summary>
            <param name="input">Bytes to save</param>
            <param name="path">Full path to save file to</param>
        </member>
        <member name="M:RestSharp.Extensions.MiscExtensions.ReadAsBytes(System.IO.Stream)">
            <summary>
            Read a stream into a byte array
            </summary>
            <param name="input">Stream to read</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:RestSharp.Extensions.MiscExtensions.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies bytes from one stream to another
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:RestSharp.Extensions.MiscExtensions.AsString(System.Byte[])">
            <summary>
            Converts a byte array to a string, using its byte order mark to convert it to the right encoding.
            http://www.shrinkrays.net/code-snippets/csharp/an-extension-method-for-converting-a-byte-array-to-a-string.aspx
            </summary>
            <param name="buffer">An array of bytes to convert</param>
            <returns>The byte as a string.</returns>
        </member>
        <member name="T:RestSharp.Extensions.ReflectionExtensions">
            <summary>
            Reflection extensions
            </summary>
        </member>
        <member name="M:RestSharp.Extensions.ReflectionExtensions.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Retrieve an attribute from a member (property)
            </summary>
            <typeparam name="T">Type of attribute to retrieve</typeparam>
            <param name="prop">Member to retrieve attribute from</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Extensions.ReflectionExtensions.GetAttribute``1(System.Type)">
            <summary>
            Retrieve an attribute from a type
            </summary>
            <typeparam name="T">Type of attribute to retrieve</typeparam>
            <param name="type">Type to retrieve attribute from</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Extensions.ReflectionExtensions.IsSubclassOfRawGeneric(System.Type,System.Type)">
            <summary>
            Checks a type to see if it derives from a raw generic (e.g. List[[]])
            </summary>
            <param name="toCheck"></param>
            <param name="generic"></param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Extensions.ReflectionExtensions.FindEnumValue(System.Type,System.String,System.Globalization.CultureInfo)">
            <summary>
            Find a value from a System.Enum by trying several possible variants
            of the string value of the enum.
            </summary>
            <param name="type">Type of enum</param>
            <param name="value">Value for which to search</param>
            <param name="culture">The culture used to calculate the name variants</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.UrlEncode(System.String)">
            <summary>
            Uses Uri.EscapeDataString() based on recommendations on MSDN
            http://blogs.msdn.com/b/yangxind/archive/2006/11/09/don-t-use-net-system-uri-unescapedatastring-in-url-decoding.aspx
            </summary>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.HasValue(System.String)">
            <summary>
            Check that a string is not null or empty
            </summary>
            <param name="input">String to check</param>
            <returns>bool</returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.RemoveUnderscoresAndDashes(System.String)">
            <summary>
            Remove underscores from a string
            </summary>
            <param name="input">String to process</param>
            <returns>string</returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.ParseJsonDate(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses most common JSON date formats
            </summary>
            <param name="input">JSON value to parse</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.RemoveSurroundingQuotes(System.String)">
            <summary>
            Remove leading and trailing " from a string
            </summary>
            <param name="input">String to parse</param>
            <returns>String</returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.Matches(System.String,System.String)">
            <summary>
            Checks a string to see if it matches a regex
            </summary>
            <param name="input">String to check</param>
            <param name="pattern">Pattern to match</param>
            <returns>bool</returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.ToPascalCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts a string to pascal case
            </summary>
            <param name="lowercaseAndUnderscoredWord">String to convert</param>
            <returns>string</returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.ToPascalCase(System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Converts a string to pascal case with the option to remove underscores
            </summary>
            <param name="text">String to convert</param>
            <param name="removeUnderscores">Option to remove underscores</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.ToCamelCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts a string to camel case
            </summary>
            <param name="lowercaseAndUnderscoredWord">String to convert</param>
            <returns>String</returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.MakeInitialLowerCase(System.String)">
            <summary>
            Convert the first letter of a string to lower case
            </summary>
            <param name="word">String to convert</param>
            <returns>string</returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.IsUpperCase(System.String)">
            <summary>
            Checks to see if a string is all uppper case
            </summary>
            <param name="inputString">String to check</param>
            <returns>bool</returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.AddUnderscores(System.String)">
            <summary>
            Add underscores to a pascal-cased string
            </summary>
            <param name="pascalCasedWord">String to convert</param>
            <returns>string</returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.AddDashes(System.String)">
            <summary>
            Add dashes to a pascal-cased string
            </summary>
            <param name="pascalCasedWord">String to convert</param>
            <returns>string</returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.AddUnderscorePrefix(System.String)">
            <summary>
            Add an undescore prefix to a pascasl-cased string
            </summary>
            <param name="pascalCasedWord"></param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.GetNameVariants(System.String,System.Globalization.CultureInfo)">
            <summary>
            Return possible variants of a name for name matching.
            </summary>
            <param name="name">String to convert</param>
            <param name="culture">The culture to use for conversion</param>
            <returns>IEnumerable&lt;string&gt;</returns>
        </member>
        <member name="T:RestSharp.Extensions.XmlExtensions">
            <summary>
            XML Extension Methods
            </summary>
        </member>
        <member name="M:RestSharp.Extensions.XmlExtensions.AsNamespaced(System.String,System.String)">
            <summary>
            Returns the name of an element with the namespace if specified
            </summary>
            <param name="name">Element name</param>
            <param name="namespace">XML Namespace</param>
            <returns></returns>
        </member>
        <member name="T:RestSharp.FileParameter">
            <summary>
            Container for files to be uploaded with requests
            </summary>
        </member>
        <member name="M:RestSharp.FileParameter.Create(System.String,System.Byte[],System.String,System.String)">
            <summary>
             Creates a file parameter from an array of bytes.
            </summary>
            <param name="name">The parameter name to use in the request.</param>
            <param name="data">The data to use as the file's contents.</param>
            <param name="filename">The filename to use in the request.</param>
            <param name="contentType">The content type to use in the request.</param>
            <returns>The <see cref="T:RestSharp.FileParameter"/></returns>
        </member>
        <member name="M:RestSharp.FileParameter.Create(System.String,System.Byte[],System.String)">
            <summary>
             Creates a file parameter from an array of bytes.
            </summary>
            <param name="name">The parameter name to use in the request.</param>
            <param name="data">The data to use as the file's contents.</param>
            <param name="filename">The filename to use in the request.</param>
            <returns>The <see cref="T:RestSharp.FileParameter"/> using the default content type.</returns>
        </member>
        <member name="P:RestSharp.FileParameter.ContentLength">
            <summary>
            The length of data to be sent
            </summary>
        </member>
        <member name="P:RestSharp.FileParameter.Writer">
            <summary>
            Provides raw data for file
            </summary>
        </member>
        <member name="P:RestSharp.FileParameter.FileName">
            <summary>
            Name of the file to use when uploading
            </summary>
        </member>
        <member name="P:RestSharp.FileParameter.ContentType">
            <summary>
            MIME content type of file
            </summary>
        </member>
        <member name="P:RestSharp.FileParameter.Name">
            <summary>
            Name of the parameter
            </summary>
        </member>
        <member name="T:RestSharp.Http">
            <summary>
            HttpWebRequest wrapper (async methods)
            </summary>
            <summary>
            HttpWebRequest wrapper
            </summary>
        </member>
        <member name="P:RestSharp.IHttp.AlwaysMultipartFormData">
            <summary>
            Always send a multipart/form-data request - even when no Files are present.
            </summary>
        </member>
        <member name="P:RestSharp.IHttp.RequestBodyBytes">
            <summary>
            An alternative to RequestBody, for when the caller already has the byte array.
            </summary>
        </member>
        <member name="M:RestSharp.Http.AsPostAsync(System.Action{RestSharp.HttpResponse},System.String)">
            <summary>
            Execute an async POST-style request with the specified HTTP Method.  
            </summary>
            <param name="httpMethod">The HTTP method to execute.</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Http.AsGetAsync(System.Action{RestSharp.HttpResponse},System.String)">
            <summary>
            Execute an async GET-style request with the specified HTTP Method.  
            </summary>
            <param name="httpMethod">The HTTP method to execute.</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Http.Create">
            <summary>
             Creates an IHttp
            </summary>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Http.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:RestSharp.Http.HasParameters">
            <summary>
            True if this HTTP request has any HTTP parameters
            </summary>
        </member>
        <member name="P:RestSharp.Http.HasCookies">
            <summary>
            True if this HTTP request has any HTTP cookies
            </summary>
        </member>
        <member name="P:RestSharp.Http.HasBody">
            <summary>
            True if a request body has been specified
            </summary>
        </member>
        <member name="P:RestSharp.Http.HasFiles">
            <summary>
            True if files have been set to be uploaded
            </summary>
        </member>
        <member name="P:RestSharp.Http.AlwaysMultipartFormData">
            <summary>
            Always send a multipart/form-data request - even when no Files are present.
            </summary>
        </member>
        <member name="P:RestSharp.Http.UserAgent">
            <summary>
            UserAgent to be sent with request
            </summary>
        </member>
        <member name="P:RestSharp.Http.Timeout">
            <summary>
            Timeout in milliseconds to be used for the request
            </summary>
        </member>
        <member name="P:RestSharp.Http.Credentials">
            <summary>
            System.Net.ICredentials to be sent with request
            </summary>
        </member>
        <member name="P:RestSharp.Http.CookieContainer">
            <summary>
            The System.Net.CookieContainer to be used for the request
            </summary>
        </member>
        <member name="P:RestSharp.Http.ResponseWriter">
            <summary>
            The method to use to write the response instead of reading into RawBytes
            </summary>
        </member>
        <member name="P:RestSharp.Http.Files">
            <summary>
            Collection of files to be sent with request
            </summary>
        </member>
        <member name="P:RestSharp.Http.UseDefaultCredentials">
            <summary>
            Determine whether or not the "default credentials" (e.g. the user account under which the current process is running)
            will be sent along to the server.
            </summary>
        </member>
        <member name="P:RestSharp.Http.Headers">
            <summary>
            HTTP headers to be sent with request
            </summary>
        </member>
        <member name="P:RestSharp.Http.Parameters">
            <summary>
            HTTP parameters (QueryString or Form values) to be sent with request
            </summary>
        </member>
        <member name="P:RestSharp.Http.Cookies">
            <summary>
            HTTP cookies to be sent with request
            </summary>
        </member>
        <member name="P:RestSharp.Http.RequestBody">
            <summary>
            Request body to be sent with request
            </summary>
        </member>
        <member name="P:RestSharp.Http.RequestContentType">
            <summary>
            Content type of the request body.
            </summary>
        </member>
        <member name="P:RestSharp.Http.RequestBodyBytes">
            <summary>
            An alternative to RequestBody, for when the caller already has the byte array.
            </summary>
        </member>
        <member name="P:RestSharp.Http.Url">
            <summary>
            URL to call for this request
            </summary>
        </member>
        <member name="T:RestSharp.HttpCookie">
            <summary>
            Representation of an HTTP cookie
            </summary>
        </member>
        <member name="P:RestSharp.HttpCookie.Comment">
            <summary>
            Comment of the cookie
            </summary>
        </member>
        <member name="P:RestSharp.HttpCookie.CommentUri">
            <summary>
            Comment of the cookie
            </summary>
        </member>
        <member name="P:RestSharp.HttpCookie.Discard">
            <summary>
            Indicates whether the cookie should be discarded at the end of the session
            </summary>
        </member>
        <member name="P:RestSharp.HttpCookie.Domain">
            <summary>
            Domain of the cookie
            </summary>
        </member>
        <member name="P:RestSharp.HttpCookie.Expired">
            <summary>
            Indicates whether the cookie is expired
            </summary>
        </member>
        <member name="P:RestSharp.HttpCookie.Expires">
            <summary>
            Date and time that the cookie expires
            </summary>
        </member>
        <member name="P:RestSharp.HttpCookie.HttpOnly">
            <summary>
            Indicates that this cookie should only be accessed by the server
            </summary>
        </member>
        <member name="P:RestSharp.HttpCookie.Name">
            <summary>
            Name of the cookie
            </summary>
        </member>
        <member name="P:RestSharp.HttpCookie.Path">
            <summary>
            Path of the cookie
            </summary>
        </member>
        <member name="P:RestSharp.HttpCookie.Port">
            <summary>
            Port of the cookie
            </summary>
        </member>
        <member name="P:RestSharp.HttpCookie.Secure">
            <summary>
            Indicates that the cookie should only be sent over secure channels
            </summary>
        </member>
        <member name="P:RestSharp.HttpCookie.TimeStamp">
            <summary>
            Date and time the cookie was created
            </summary>
        </member>
        <member name="P:RestSharp.HttpCookie.Value">
            <summary>
            Value of the cookie
            </summary>
        </member>
        <member name="P:RestSharp.HttpCookie.Version">
            <summary>
            Version of the cookie
            </summary>
        </member>
        <member name="T:RestSharp.HttpFile">
            <summary>
            Container for HTTP file
            </summary>
        </member>
        <member name="P:RestSharp.HttpFile.ContentLength">
            <summary>
            The length of data to be sent
            </summary>
        </member>
        <member name="P:RestSharp.HttpFile.Writer">
            <summary>
            Provides raw data for file
            </summary>
        </member>
        <member name="P:RestSharp.HttpFile.FileName">
            <summary>
            Name of the file to use when uploading
            </summary>
        </member>
        <member name="P:RestSharp.HttpFile.ContentType">
            <summary>
            MIME content type of file
            </summary>
        </member>
        <member name="P:RestSharp.HttpFile.Name">
            <summary>
            Name of the parameter
            </summary>
        </member>
        <member name="T:RestSharp.HttpHeader">
            <summary>
            Representation of an HTTP header
            </summary>
        </member>
        <member name="P:RestSharp.HttpHeader.Name">
            <summary>
            Name of the header
            </summary>
        </member>
        <member name="P:RestSharp.HttpHeader.Value">
            <summary>
            Value of the header
            </summary>
        </member>
        <member name="T:RestSharp.HttpParameter">
            <summary>
            Representation of an HTTP parameter (QueryString or Form value)
            </summary>
        </member>
        <member name="P:RestSharp.HttpParameter.Name">
            <summary>
            Name of the parameter
            </summary>
        </member>
        <member name="P:RestSharp.HttpParameter.Value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:RestSharp.HttpResponse">
            <summary>
            HTTP response data
            </summary>
        </member>
        <member name="T:RestSharp.IHttpResponse">
            <summary>
            HTTP response data
            </summary>
        </member>
        <member name="P:RestSharp.IHttpResponse.ContentType">
            <summary>
            MIME content type of response
            </summary>
        </member>
        <member name="P:RestSharp.IHttpResponse.ContentLength">
            <summary>
            Length in bytes of the response content
            </summary>
        </member>
        <member name="P:RestSharp.IHttpResponse.ContentEncoding">
            <summary>
            Encoding of the response content
            </summary>
        </member>
        <member name="P:RestSharp.IHttpResponse.Content">
            <summary>
            String representation of response content
            </summary>
        </member>
        <member name="P:RestSharp.IHttpResponse.StatusCode">
            <summary>
            HTTP response status code
            </summary>
        </member>
        <member name="P:RestSharp.IHttpResponse.StatusDescription">
            <summary>
            Description of HTTP status returned
            </summary>
        </member>
        <member name="P:RestSharp.IHttpResponse.RawBytes">
            <summary>
            Response content
            </summary>
        </member>
        <member name="P:RestSharp.IHttpResponse.ResponseUri">
            <summary>
            The URL that actually responded to the content (different from request if redirected)
            </summary>
        </member>
        <member name="P:RestSharp.IHttpResponse.Server">
            <summary>
            HttpWebResponse.Server
            </summary>
        </member>
        <member name="P:RestSharp.IHttpResponse.Headers">
            <summary>
            Headers returned by server with the response
            </summary>
        </member>
        <member name="P:RestSharp.IHttpResponse.Cookies">
            <summary>
            Cookies returned by server with the response
            </summary>
        </member>
        <member name="P:RestSharp.IHttpResponse.ResponseStatus">
            <summary>
            Status of the request. Will return Error for transport errors.
            HTTP errors will still return ResponseStatus.Completed, check StatusCode instead
            </summary>
        </member>
        <member name="P:RestSharp.IHttpResponse.ErrorMessage">
            <summary>
            Transport or other non-HTTP error generated while attempting request
            </summary>
        </member>
        <member name="P:RestSharp.IHttpResponse.ErrorException">
            <summary>
            Exception thrown when error is encountered.
            </summary>
        </member>
        <member name="M:RestSharp.HttpResponse.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:RestSharp.HttpResponse.ContentType">
            <summary>
            MIME content type of response
            </summary>
        </member>
        <member name="P:RestSharp.HttpResponse.ContentLength">
            <summary>
            Length in bytes of the response content
            </summary>
        </member>
        <member name="P:RestSharp.HttpResponse.ContentEncoding">
            <summary>
            Encoding of the response content
            </summary>
        </member>
        <member name="P:RestSharp.HttpResponse.Content">
            <summary>
            Lazy-loaded string representation of response content
            </summary>
        </member>
        <member name="P:RestSharp.HttpResponse.StatusCode">
            <summary>
            HTTP response status code
            </summary>
        </member>
        <member name="P:RestSharp.HttpResponse.StatusDescription">
            <summary>
            Description of HTTP status returned
            </summary>
        </member>
        <member name="P:RestSharp.HttpResponse.RawBytes">
            <summary>
            Response content
            </summary>
        </member>
        <member name="P:RestSharp.HttpResponse.ResponseUri">
            <summary>
            The URL that actually responded to the content (different from request if redirected)
            </summary>
        </member>
        <member name="P:RestSharp.HttpResponse.Server">
            <summary>
            HttpWebResponse.Server
            </summary>
        </member>
        <member name="P:RestSharp.HttpResponse.Headers">
            <summary>
            Headers returned by server with the response
            </summary>
        </member>
        <member name="P:RestSharp.HttpResponse.Cookies">
            <summary>
            Cookies returned by server with the response
            </summary>
        </member>
        <member name="P:RestSharp.HttpResponse.ResponseStatus">
            <summary>
            Status of the request. Will return Error for transport errors.
            HTTP errors will still return ResponseStatus.Completed, check StatusCode instead
            </summary>
        </member>
        <member name="P:RestSharp.HttpResponse.ErrorMessage">
            <summary>
            Transport or other non-HTTP error generated while attempting request
            </summary>
        </member>
        <member name="P:RestSharp.HttpResponse.ErrorException">
            <summary>
            Exception thrown when error is encountered.
            </summary>
        </member>
        <member name="T:RestSharp.IRestClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:RestSharp.IRestClient.ExecuteAsync(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle})">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:RestSharp.IRestClient.ExecuteAsync``1(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse{``0},RestSharp.RestRequestAsyncHandle})">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:RestSharp.IRestClient.ExecuteAsyncGet(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle},System.String)">
            <summary>
            Executes a GET-style request and callback asynchronously, authenticating if needed
            </summary>
            <param name="request">Request to be executed</param>
            <param name="callback">Callback function to be executed upon completion providing access to the async handle.</param>
            <param name="httpMethod">The HTTP method to execute</param>
        </member>
        <member name="M:RestSharp.IRestClient.ExecuteAsyncPost(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle},System.String)">
            <summary>
            Executes a POST-style request and callback asynchronously, authenticating if needed
            </summary>
            <param name="request">Request to be executed</param>
            <param name="callback">Callback function to be executed upon completion providing access to the async handle.</param>
            <param name="httpMethod">The HTTP method to execute</param>
        </member>
        <member name="M:RestSharp.IRestClient.ExecuteAsyncGet``1(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse{``0},RestSharp.RestRequestAsyncHandle},System.String)">
            <summary>
            Executes a GET-style request and callback asynchronously, authenticating if needed
            </summary>
            <typeparam name="T">Target deserialization type</typeparam>
            <param name="request">Request to be executed</param>
            <param name="callback">Callback function to be executed upon completion</param>
            <param name="httpMethod">The HTTP method to execute</param>
        </member>
        <member name="M:RestSharp.IRestClient.ExecuteAsyncPost``1(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse{``0},RestSharp.RestRequestAsyncHandle},System.String)">
            <summary>
            Executes a GET-style request and callback asynchronously, authenticating if needed
            </summary>
            <typeparam name="T">Target deserialization type</typeparam>
            <param name="request">Request to be executed</param>
            <param name="callback">Callback function to be executed upon completion</param>
            <param name="httpMethod">The HTTP method to execute</param>
        </member>
        <member name="P:RestSharp.IRestClient.CookieContainer">
            <summary>
            
            </summary>
        </member>
        <member name="P:RestSharp.IRestClient.UserAgent">
            <summary>
            
            </summary>
        </member>
        <member name="P:RestSharp.IRestClient.Timeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:RestSharp.IRestClient.UseSynchronizationContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:RestSharp.IRestClient.Authenticator">
            <summary>
            
            </summary>
        </member>
        <member name="P:RestSharp.IRestClient.BaseUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:RestSharp.IRestClient.DefaultParameters">
            <summary>
            
            </summary>
        </member>
        <member name="M:RestSharp.IRestRequest.AddBody(System.Object,System.String)">
            <summary>
            Serializes obj to format specified by RequestFormat, but passes xmlNamespace if using the default XmlSerializer
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="xmlNamespace">The XML namespace to use when serializing</param>
            <returns>This request</returns>
        </member>
        <member name="M:RestSharp.IRestRequest.AddBody(System.Object)">
            <summary>
            Serializes obj to data format specified by RequestFormat and adds it to the request body.
            </summary>
            <param name="obj">The object to serialize</param>
            <returns>This request</returns>
        </member>
        <member name="M:RestSharp.IRestRequest.AddObject(System.Object,System.String[])">
            <summary>
            Calls AddParameter() for all public, readable properties specified in the white list
            </summary>
            <example>
            request.AddObject(product, "ProductId", "Price", ...);
            </example>
            <param name="obj">The object with properties to add as parameters</param>
            <param name="whitelist">The names of the properties to include</param>
            <returns>This request</returns>
        </member>
        <member name="M:RestSharp.IRestRequest.AddObject(System.Object)">
            <summary>
            Calls AddParameter() for all public, readable properties of obj
            </summary>
            <param name="obj">The object with properties to add as parameters</param>
            <returns>This request</returns>
        </member>
        <member name="M:RestSharp.IRestRequest.AddParameter(RestSharp.Parameter)">
            <summary>
            Add the parameter to the request
            </summary>
            <param name="p">Parameter to add</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.IRestRequest.AddParameter(System.String,System.Object)">
            <summary>
            Adds a HTTP parameter to the request (QueryString for GET, DELETE, OPTIONS and HEAD; Encoded form for POST and PUT)
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <returns>This request</returns>
        </member>
        <member name="M:RestSharp.IRestRequest.AddParameter(System.String,System.Object,RestSharp.ParameterType)">
            <summary>
            Adds a parameter to the request. There are five types of parameters:
            - GetOrPost: Either a QueryString value or encoded form value based on method
            - HttpHeader: Adds the name/value pair to the HTTP request's Headers collection
            - UrlSegment: Inserted into URL if there is a matching url token e.g. {AccountId}
            - Cookie: Adds the name/value pair to the HTTP request's Cookies collection
            - RequestBody: Used by AddBody() (not recommended to use directly)
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <param name="type">The type of parameter to add</param>
            <returns>This request</returns>
        </member>
        <member name="M:RestSharp.IRestRequest.AddHeader(System.String,System.String)">
            <summary>
            Shortcut to AddParameter(name, value, HttpHeader) overload
            </summary>
            <param name="name">Name of the header to add</param>
            <param name="value">Value of the header to add</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.IRestRequest.AddCookie(System.String,System.String)">
            <summary>
            Shortcut to AddParameter(name, value, Cookie) overload
            </summary>
            <param name="name">Name of the cookie to add</param>
            <param name="value">Value of the cookie to add</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.IRestRequest.AddUrlSegment(System.String,System.String)">
            <summary>
            Shortcut to AddParameter(name, value, UrlSegment) overload
            </summary>
            <param name="name">Name of the segment to add</param>
            <param name="value">Value of the segment to add</param>
            <returns></returns>
        </member>
        <member name="P:RestSharp.IRestRequest.AlwaysMultipartFormData">
            <summary>
            Always send a multipart/form-data request - even when no Files are present.
            </summary>
        </member>
        <member name="P:RestSharp.IRestRequest.JsonSerializer">
            <summary>
            Serializer to use when writing JSON request bodies. Used if RequestFormat is Json.
            By default the included JsonSerializer is used (currently using JSON.NET default serialization).
            </summary>
        </member>
        <member name="P:RestSharp.IRestRequest.XmlSerializer">
            <summary>
            Serializer to use when writing XML request bodies. Used if RequestFormat is Xml.
            By default the included XmlSerializer is used.
            </summary>
        </member>
        <member name="P:RestSharp.IRestRequest.ResponseWriter">
            <summary>
            Set this to write response to Stream rather than reading into memory.
            </summary>
        </member>
        <member name="P:RestSharp.IRestRequest.Parameters">
            <summary>
            Container of all HTTP parameters to be passed with the request. 
            See AddParameter() for explanation of the types of parameters that can be passed
            </summary>
        </member>
        <member name="P:RestSharp.IRestRequest.Files">
            <summary>
            Container of all the files to be uploaded with the request.
            </summary>
        </member>
        <member name="P:RestSharp.IRestRequest.Method">
            <summary>
            Determines what HTTP method to use for this request. Supported methods: GET, POST, PUT, DELETE, HEAD, OPTIONS
            Default is GET
            </summary>
        </member>
        <member name="P:RestSharp.IRestRequest.Resource">
            <summary>
            The Resource URL to make the request against.
            Tokens are substituted with UrlSegment parameters and match by name.
            Should not include the scheme or domain. Do not include leading slash.
            Combined with RestClient.BaseUrl to assemble final URL:
            {BaseUrl}/{Resource} (BaseUrl is scheme + domain, e.g. http://example.com)
            </summary>
            <example>
            // example for url token replacement
            request.Resource = "Products/{ProductId}";
            request.AddParameter("ProductId", 123, ParameterType.UrlSegment);
            </example>
        </member>
        <member name="P:RestSharp.IRestRequest.RequestFormat">
            <summary>
            Serializer to use when writing XML request bodies. Used if RequestFormat is Xml.
            By default XmlSerializer is used.
            </summary>
        </member>
        <member name="P:RestSharp.IRestRequest.RootElement">
            <summary>
            Used by the default deserializers to determine where to start deserializing from.
            Can be used to skip container or root elements that do not have corresponding deserialzation targets.
            </summary>
        </member>
        <member name="P:RestSharp.IRestRequest.DateFormat">
            <summary>
            Used by the default deserializers to explicitly set which date format string to use when parsing dates.
            </summary>
        </member>
        <member name="P:RestSharp.IRestRequest.XmlNamespace">
            <summary>
            Used by XmlDeserializer. If not specified, XmlDeserializer will flatten response by removing namespaces from element names.
            </summary>
        </member>
        <member name="P:RestSharp.IRestRequest.Credentials">
            <summary>
            In general you would not need to set this directly. Used by the NtlmAuthenticator. 
            </summary>
        </member>
        <member name="P:RestSharp.IRestRequest.Timeout">
            <summary>
            Timeout in milliseconds to be used for the request. This timeout value overrides a timeout set on the RestClient.
            </summary>
        </member>
        <member name="P:RestSharp.IRestRequest.Attempts">
            <summary>
            How many attempts were made to send this Request?
            </summary>
            <remarks>
            This Number is incremented each time the RestClient sends the request.
            Useful when using Asynchronous Execution with Callbacks
            </remarks>
        </member>
        <member name="P:RestSharp.IRestRequest.UseDefaultCredentials">
            <summary>
            Determine whether or not the "default credentials" (e.g. the user account under which the current process is running)
            will be sent along to the server. The default is false.
            </summary>
        </member>
        <member name="T:RestSharp.IRestResponse">
            <summary>
            Container for data sent back from API
            </summary>
        </member>
        <member name="P:RestSharp.IRestResponse.Request">
            <summary>
            The RestRequest that was made to get this RestResponse
            </summary>
            <remarks>
            Mainly for debugging if ResponseStatus is not OK
            </remarks> 
        </member>
        <member name="P:RestSharp.IRestResponse.ContentType">
            <summary>
            MIME content type of response
            </summary>
        </member>
        <member name="P:RestSharp.IRestResponse.ContentLength">
            <summary>
            Length in bytes of the response content
            </summary>
        </member>
        <member name="P:RestSharp.IRestResponse.ContentEncoding">
            <summary>
            Encoding of the response content
            </summary>
        </member>
        <member name="P:RestSharp.IRestResponse.Content">
            <summary>
            String representation of response content
            </summary>
        </member>
        <member name="P:RestSharp.IRestResponse.StatusCode">
            <summary>
            HTTP response status code
            </summary>
        </member>
        <member name="P:RestSharp.IRestResponse.StatusDescription">
            <summary>
            Description of HTTP status returned
            </summary>
        </member>
        <member name="P:RestSharp.IRestResponse.RawBytes">
            <summary>
            Response content
            </summary>
        </member>
        <member name="P:RestSharp.IRestResponse.ResponseUri">
            <summary>
            The URL that actually responded to the content (different from request if redirected)
            </summary>
        </member>
        <member name="P:RestSharp.IRestResponse.Server">
            <summary>
            HttpWebResponse.Server
            </summary>
        </member>
        <member name="P:RestSharp.IRestResponse.Cookies">
            <summary>
            Cookies returned by server with the response
            </summary>
        </member>
        <member name="P:RestSharp.IRestResponse.Headers">
            <summary>
            Headers returned by server with the response
            </summary>
        </member>
        <member name="P:RestSharp.IRestResponse.ResponseStatus">
            <summary>
            Status of the request. Will return Error for transport errors.
            HTTP errors will still return ResponseStatus.Completed, check StatusCode instead
            </summary>
        </member>
        <member name="P:RestSharp.IRestResponse.ErrorMessage">
            <summary>
            Transport or other non-HTTP error generated while attempting request
            </summary>
        </member>
        <member name="P:RestSharp.IRestResponse.ErrorException">
            <summary>
            Exceptions thrown during the request, if any.  
            </summary>
            <remarks>Will contain only network transport or framework exceptions thrown during the request.  HTTP protocol errors are handled by RestSharp and will not appear here.</remarks>
        </member>
        <member name="T:RestSharp.IRestResponse`1">
            <summary>
            Container for data sent back from API including deserialized data
            </summary>
            <typeparam name="T">Type of data to deserialize to</typeparam>
        </member>
        <member name="P:RestSharp.IRestResponse`1.Data">
            <summary>
            Deserialized entity data
            </summary>
        </member>
        <member name="T:RestSharp.Parameter">
            <summary>
            Parameter container for REST requests
            </summary>
        </member>
        <member name="M:RestSharp.Parameter.ToString">
            <summary>
            Return a human-readable representation of this parameter
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:RestSharp.Parameter.Name">
            <summary>
            Name of the parameter
            </summary>
        </member>
        <member name="P:RestSharp.Parameter.Value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="P:RestSharp.Parameter.Type">
            <summary>
            Type of the parameter
            </summary>
        </member>
        <member name="T:RestSharp.RestClient">
            <summary>
            Client to translate RestRequests into Http requests and process response result
            </summary>
        </member>
        <member name="M:RestSharp.RestClient.ExecuteAsync(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle})">
            <summary>
            Executes the request and callback asynchronously, authenticating if needed
            </summary>
            <param name="request">Request to be executed</param>
            <param name="callback">Callback function to be executed upon completion providing access to the async handle.</param>
        </member>
        <member name="M:RestSharp.RestClient.ExecuteAsyncGet(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle},System.String)">
            <summary>
            Executes a GET-style request and callback asynchronously, authenticating if needed
            </summary>
            <param name="request">Request to be executed</param>
            <param name="callback">Callback function to be executed upon completion providing access to the async handle.</param>
            <param name="httpMethod">The HTTP method to execute</param>
        </member>
        <member name="M:RestSharp.RestClient.ExecuteAsyncPost(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle},System.String)">
            <summary>
            Executes a POST-style request and callback asynchronously, authenticating if needed
            </summary>
            <param name="request">Request to be executed</param>
            <param name="callback">Callback function to be executed upon completion providing access to the async handle.</param>
            <param name="httpMethod">The HTTP method to execute</param>
        </member>
        <member name="M:RestSharp.RestClient.ExecuteAsync``1(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse{``0},RestSharp.RestRequestAsyncHandle})">
            <summary>
            Executes the request and callback asynchronously, authenticating if needed
            </summary>
            <typeparam name="T">Target deserialization type</typeparam>
            <param name="request">Request to be executed</param>
            <param name="callback">Callback function to be executed upon completion</param>
        </member>
        <member name="M:RestSharp.RestClient.ExecuteAsyncGet``1(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse{``0},RestSharp.RestRequestAsyncHandle},System.String)">
            <summary>
            Executes a GET-style request and callback asynchronously, authenticating if needed
            </summary>
            <typeparam name="T">Target deserialization type</typeparam>
            <param name="request">Request to be executed</param>
            <param name="callback">Callback function to be executed upon completion</param>
            <param name="httpMethod">The HTTP method to execute</param>
        </member>
        <member name="M:RestSharp.RestClient.ExecuteAsyncPost``1(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse{``0},RestSharp.RestRequestAsyncHandle},System.String)">
            <summary>
            Executes a POST-style request and callback asynchronously, authenticating if needed
            </summary>
            <typeparam name="T">Target deserialization type</typeparam>
            <param name="request">Request to be executed</param>
            <param name="callback">Callback function to be executed upon completion</param>
            <param name="httpMethod">The HTTP method to execute</param>
        </member>
        <member name="M:RestSharp.RestClient.#ctor">
            <summary>
            Default constructor that registers default content handlers
            </summary>
        </member>
        <member name="M:RestSharp.RestClient.#ctor(System.String)">
            <summary>
            Sets the BaseUrl property for requests made by this client instance
            </summary>
            <param name="baseUrl"></param>
        </member>
        <member name="M:RestSharp.RestClient.AddHandler(System.String,RestSharp.Deserializers.IDeserializer)">
            <summary>
            Registers a content handler to process response content
            </summary>
            <param name="contentType">MIME content type of the response content</param>
            <param name="deserializer">Deserializer to use to process content</param>
        </member>
        <member name="M:RestSharp.RestClient.RemoveHandler(System.String)">
            <summary>
            Remove a content handler for the specified MIME content type
            </summary>
            <param name="contentType">MIME content type to remove</param>
        </member>
        <member name="M:RestSharp.RestClient.ClearHandlers">
            <summary>
            Remove all content handlers
            </summary>
        </member>
        <member name="M:RestSharp.RestClient.GetHandler(System.String)">
            <summary>
            Retrieve the handler for the specified MIME content type
            </summary>
            <param name="contentType">MIME content type to retrieve</param>
            <returns>IDeserializer instance</returns>
        </member>
        <member name="M:RestSharp.RestClient.BuildUri(RestSharp.IRestRequest)">
            <summary>
            Assembles URL to call based on parameters, method and resource
            </summary>
            <param name="request">RestRequest to execute</param>
            <returns>Assembled System.Uri</returns>
        </member>
        <member name="P:RestSharp.RestClient.DefaultParameters">
            <summary>
            Parameters included with every request made with this instance of RestClient
            If specified in both client and request, the request wins
            </summary>
        </member>
        <member name="P:RestSharp.RestClient.MaxRedirects">
            <summary>
            Maximum number of redirects to follow if FollowRedirects is true
            </summary>
        </member>
        <member name="P:RestSharp.RestClient.FollowRedirects">
            <summary>
            Default is true. Determine whether or not requests that result in 
            HTTP status codes of 3xx should follow returned redirect
            </summary>
        </member>
        <member name="P:RestSharp.RestClient.CookieContainer">
            <summary>
            The CookieContainer used for requests made by this client instance
            </summary>
        </member>
        <member name="P:RestSharp.RestClient.UserAgent">
            <summary>
            UserAgent to use for requests made by this client instance
            </summary>
        </member>
        <member name="P:RestSharp.RestClient.Timeout">
            <summary>
            Timeout in milliseconds to use for requests made by this client instance
            </summary>
        </member>
        <member name="P:RestSharp.RestClient.UseSynchronizationContext">
            <summary>
            Whether to invoke async callbacks using the SynchronizationContext.Current captured when invoked
            </summary>
        </member>
        <member name="P:RestSharp.RestClient.Authenticator">
            <summary>
            Authenticator to use for requests made by this client instance
            </summary>
        </member>
        <member name="P:RestSharp.RestClient.BaseUrl">
            <summary>
            Combined with Request.Resource to construct URL for request
            Should include scheme and domain without trailing slash.
            </summary>
            <example>
            client.BaseUrl = "http://example.com";
            </example>
        </member>
        <member name="M:RestSharp.RestClientExtensions.ExecuteAsync(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse})">
            <summary>
            Executes the request and callback asynchronously, authenticating if needed
            </summary>
            <param name="client">The IRestClient this method extends</param>
            <param name="request">Request to be executed</param>
            <param name="callback">Callback function to be executed upon completion</param>
        </member>
        <member name="M:RestSharp.RestClientExtensions.ExecuteAsync``1(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse{``0}})">
            <summary>
            Executes the request and callback asynchronously, authenticating if needed
            </summary>
            <param name="client">The IRestClient this method extends</param>
            <typeparam name="T">Target deserialization type</typeparam>
            <param name="request">Request to be executed</param>
            <param name="callback">Callback function to be executed upon completion providing access to the async handle</param>
        </member>
        <member name="M:RestSharp.RestClientExtensions.AddDefaultParameter(RestSharp.IRestClient,RestSharp.Parameter)">
            <summary>
            Add a parameter to use on every request made with this client instance
            </summary>
            <param name="restClient">The IRestClient instance</param>
            <param name="p">Parameter to add</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.RemoveDefaultParameter(RestSharp.IRestClient,System.String)">
            <summary>
            Removes a parameter from the default parameters that are used on every request made with this client instance
            </summary>
            <param name="restClient">The IRestClient instance</param>
            <param name="name">The name of the parameter that needs to be removed</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.AddDefaultParameter(RestSharp.IRestClient,System.String,System.Object)">
            <summary>
            Adds a HTTP parameter (QueryString for GET, DELETE, OPTIONS and HEAD; Encoded form for POST and PUT)
            Used on every request made by this client instance
            </summary>
            <param name="restClient">The IRestClient instance</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <returns>This request</returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.AddDefaultParameter(RestSharp.IRestClient,System.String,System.Object,RestSharp.ParameterType)">
            <summary>
            Adds a parameter to the request. There are four types of parameters:
            - GetOrPost: Either a QueryString value or encoded form value based on method
            - HttpHeader: Adds the name/value pair to the HTTP request's Headers collection
            - UrlSegment: Inserted into URL if there is a matching url token e.g. {AccountId}
            - RequestBody: Used by AddBody() (not recommended to use directly)
            </summary>
            <param name="restClient">The IRestClient instance</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <param name="type">The type of parameter to add</param>
            <returns>This request</returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.AddDefaultHeader(RestSharp.IRestClient,System.String,System.String)">
            <summary>
            Shortcut to AddDefaultParameter(name, value, HttpHeader) overload
            </summary>
            <param name="restClient">The IRestClient instance</param>
            <param name="name">Name of the header to add</param>
            <param name="value">Value of the header to add</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.AddDefaultUrlSegment(RestSharp.IRestClient,System.String,System.String)">
            <summary>
            Shortcut to AddDefaultParameter(name, value, UrlSegment) overload
            </summary>
            <param name="restClient">The IRestClient instance</param>
            <param name="name">Name of the segment to add</param>
            <param name="value">Value of the segment to add</param>
            <returns></returns>
        </member>
        <member name="T:RestSharp.RestRequest">
            <summary>
            Container for data used to make requests
            </summary>
        </member>
        <member name="M:RestSharp.RestRequest.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:RestSharp.RestRequest.#ctor(RestSharp.Method)">
            <summary>
            Sets Method property to value of method
            </summary>
            <param name="method">Method to use for this request</param>
        </member>
        <member name="M:RestSharp.RestRequest.#ctor(System.String)">
            <summary>
            Sets Resource property
            </summary>
            <param name="resource">Resource to use for this request</param>
        </member>
        <member name="M:RestSharp.RestRequest.#ctor(System.String,RestSharp.Method)">
            <summary>
            Sets Resource and Method properties
            </summary>
            <param name="resource">Resource to use for this request</param>
            <param name="method">Method to use for this request</param>
        </member>
        <member name="M:RestSharp.RestRequest.#ctor(System.Uri)">
            <summary>
            Sets Resource property
            </summary>
            <param name="resource">Resource to use for this request</param>
        </member>
        <member name="M:RestSharp.RestRequest.#ctor(System.Uri,RestSharp.Method)">
            <summary>
            Sets Resource and Method properties
            </summary>
            <param name="resource">Resource to use for this request</param>
            <param name="method">Method to use for this request</param>
        </member>
        <member name="M:RestSharp.RestRequest.AddFile(System.String,System.String)">
            <summary>
            Adds a f